from aiogram import Router, F
from aiogram.filters import ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from aiogram.types import CallbackQuery, ChatJoinRequest, ChatMemberUpdated
from aiogram import Bot
import logging
from typing import Dict

from datetime import datetime, timedelta

from tgbot.keyboards.admin.inline import accept_to_channel, leaved_user

channel_router = Router()

# –•—Ä–∞–Ω–∏–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
# –§–æ—Ä–º–∞—Ç: {message_id: (chat_id, user_id, timestamp)}
pending_requests: Dict[int, tuple[int, int, datetime]] = {}


@channel_router.chat_join_request()
async def handle_join_request(request: ChatJoinRequest, bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Ö–æ–¥."""
    user = request.from_user
    chat_id = request.chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ –æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
    invite_info = ""
    if request.invite_link:
        invite_info = f"\n–ü—Ä–∏—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ: <i>{request.invite_link.name if request.invite_link.name else request.invite_link.invite_link}</i>"

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
        admin_msg = await bot.send_message(
            chat_id=6486127400,
            text=f"<b>üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} (ID: <code>{user.id}</code>) –æ—Å—Ç–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –≤ –∫–∞–Ω–∞–ª{invite_info}",
            reply_markup=accept_to_channel(user_id=user.username)
        )

        pending_requests[admin_msg.message_id] = (chat_id, user.id, datetime.now())

        # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        current_time = datetime.now()
        expired_messages = [
            msg_id for msg_id, (_, _, timestamp) in pending_requests.items()
            if current_time - timestamp > timedelta(hours=24)
        ]
        for msg_id in expired_messages:
            pending_requests.pop(msg_id)

        logging.info(f"Stored join request from {user.username} (ID: {user.id})")

    except Exception as e:
        logging.error(f"Error handling join request: {e}")

@channel_router.chat_member(ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER))
async def on_user_leave(event: ChatMemberUpdated, bot: Bot):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    await bot.send_message(
        chat_id=6486127400,
        text=f"<b>–í—ã—Ö–æ–¥ –∏–∑ –∫–∞–Ω–∞–ª–∞</b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{event.from_user.username} (ID: {event.from_user.id}) –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª",
        reply_markup=leaved_user(user_id=event.from_user.username)
    )

@channel_router.callback_query(F.data == "accept_channel")
async def handle_accept_channel(callback: CallbackQuery, bot: Bot) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Ö–æ–¥"""
    try:
        if callback.message.message_id not in pending_requests:
            await callback.answer("–ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
            return

        chat_id, user_id, _ = pending_requests[callback.message.message_id]

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Ö–æ–¥
        try:
            await bot.approve_chat_join_request(
                chat_id=chat_id,
                user_id=user_id
            )
            logging.info(f"Approved join request for user ID: {user_id}")
        except Exception as e:
            logging.error(f"Failed to approve join request: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
        pending_requests.pop(callback.message.message_id)

        message_text = callback.message.text
        await callback.message.edit_text(
            f"{message_text}\n\n‚úÖ –ü—Ä–∏–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.username}",
            reply_markup=None
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
        try:
            await bot.send_message(
                chat_id=user_id,
                text="‚úÖ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!"
            )
        except Exception as e:
            logging.error(f"Failed to send approval message to user: {e}")

        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç")

    except Exception as e:
        logging.error(f"Error handling accept channel callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


@channel_router.callback_query(F.data == "deny_channel")
async def handle_deny_channel(callback: CallbackQuery, bot: Bot) -> None:
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Ö–æ–¥"""
    try:
        if callback.message.message_id not in pending_requests:
            await callback.answer("–ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
            return

        chat_id, user_id, _ = pending_requests[callback.message.message_id]

        # –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
        try:
            await bot.decline_chat_join_request(
                chat_id=chat_id,
                user_id=user_id
            )
            logging.info(f"Declined join request for user ID: {user_id}")
        except Exception as e:
            logging.error(f"Failed to decline join request: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
        pending_requests.pop(callback.message.message_id)

        message_text = callback.message.text
        await callback.message.edit_text(
            f"{message_text}\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.username}",
            reply_markup=None
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏
        try:
            await bot.send_message(
                chat_id=user_id,
                text="‚ùå –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            )
        except Exception as e:
            logging.error(f"Failed to send denial message to user: {e}")

        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω")

    except Exception as e:
        logging.error(f"Error handling deny channel callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)