import logging

from aiogram import Router, F, Bot, types
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent

inline_router = Router()

# –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ MnA
MNA_DATA = [
    {
        "name": "Interzet",
        "authorization": "IPoE Static",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3289"
    },
    {
        "name": "–¢—É—Ä–∞-Telecom",
        "authorization": "DHCP / PPPoE",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3280"
    },
    {
        "name": "–Ø—Ä–æ—Å–ª–∞–≤–ª—å –¢–µ–ª–µ—Å–µ—Ç—å (–Ø–¢–°)",
        "authorization": "DHCP / PPPoE",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3136"
    },
    {
        "name": "–ò—Ä–∫–Ω–µ—Ç",
        "authorization": "PPPoE",
        "connection": "ADSL / GPON / FTTH",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3192"
    },
    {
        "name": "–ö–æ–Ω—Ç–∞–∫—Ç (–¢—É–ª–∞)",
        "authorization": "PPPoE",
        "connection": "ADSL",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3282"
    },
    {
        "name": "–ö–æ–ª–∞–º–±–∏—è –¢–µ–ª–µ–∫–æ–º",
        "authorization": "DHCP / PPPoE",
        "connection": "Ethernet / ADSL",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/2761"
    },
    {
        "name": "–¢–µ–ª–µ–º–∏—Ä (–õ–∏–ø–µ—Ü–∫)",
        "authorization": "DHCP / PPPoE",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/article/3191"
    },
    {
        "name": "–ê–∫–∞–¥–æ (–°–ü–ë)",
        "authorization": "DHCP mac+vlan",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3291"
    },
    {
        "name": "–ë–ö–° (–ë—Ä—è–Ω—Å–∫)",
        "authorization": "DHCP mac+vlan / DHCP",
        "connection": "Ethernet / PON",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/2760"
    },
    {
        "name": "–ò–Ω—Ñ–æ—Ü–µ–Ω—Ç—Ä (–°–æ—Å–Ω–æ–≤—ã–π –±–æ—Ä)",
        "authorization": "IPoE Static",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3285"
    },
    {
        "name": "–ö–æ–Ω–≤–µ–∫—Å/–¢–ö–° (–ï–ö–ë)",
        "authorization": "IPoE Static / PPTP (–æ–±—â–µ–∂–∏—Ç–∏—è)",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/2769"
    },
    {
        "name": "–î–µ–ª—å—Ç–∞-–¢–µ–ª–µ–∫–æ–º",
        "authorization": "PPPoE",
        "connection": "ADSL",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3106"
    },
    {
        "name": "–ú–µ–≥–∞–ø–æ–ª–∏—Å-–¢–µ–ª–µ–∫–æ–º",
        "authorization": "PPPoE",
        "connection": "PON",
        "link": "https://clever.ertelecom.ru/content/space/4/article/3189"
    },
    {
        "name": "–°–∏–±–¢–µ–ª–µ–ö–æ–º (–°–¢–ö)",
        "authorization": "DHCP / PPPoE",
        "connection": "Ethernet / ADSL",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3121"
    },
    {
        "name": "Westcall / N-Link (–†—è–∑–∞–Ω—å)",
        "authorization": "DHCP / PPPoE",
        "connection": "Ethernet / ADSL / PON",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3288"
    },
    {
        "name": "–ê–∫–∞–¥–æ (–ï–ö–ë)",
        "authorization": "L2TP",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/2768"
    },
    {
        "name": "–°–∞—Ç—É—Ä–Ω (–ü–µ—Ä–º—å)",
        "authorization": "PPPoE",
        "connection": "FTTH",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/6528"
    },
    {
        "name": "Westcall (–°–ü–±)",
        "authorization": "DHCP mac+vlan",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3286"
    },
    {
        "name": "–ö—Ä–µ–¥–æ–ª–∏–Ω–∫ (–°–ü–±)",
        "authorization": "DHCP mac+vlan",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3283"
    },
    {
        "name": "MSNet (–°–ü–ë)",
        "authorization": "DHCP mac+vlan",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3287"
    },
    {
        "name": "–°—Ç—Ä–µ–ª–∞ (–î–∏–º–∏—Ç—Ä–æ–≤–≥—Ä–∞–¥)",
        "authorization": "DHCP",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3172"
    },
    {
        "name": "–°-–¢–µ–ª–µ–∫–æ–º –ú–°–ö (–°–∞–º–æ–ª–µ—Ç)",
        "authorization": "DHCP / PPPoE",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/3238"
    },
    {
        "name": "–î–∏–∞–Ω—ç—Ç (–ë–∞—Ä–Ω–∞—É–ª –∏ –æ–±–ª–∞—Å—Ç—å)",
        "authorization": "PPPoE / L2TP",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/folder/582/article/2646"
    },
    {
        "name": "–ù–¢–° (–¢–æ–º—Å–∫)",
        "authorization": "IPoE DHCP",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/article/3648"
    },
    {
        "name": "–ö—Ä–æ–Ω–∏–∫—Å/Rinet",
        "authorization": "DHCP / DHCP mac+vlan",
        "connection": "Ethernet",
        "link": "https://clever.ertelecom.ru/content/space/4/article/3246/page/3"
    }
]


async def is_user_in_channel(user_id: int, bot):
    channel_id = -1002068999312
    try:
        sub = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        logging.info(sub)
        return sub.status != "left"
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


@inline_router.inline_query()
async def handle_inline_query(query: InlineQuery, bot: Bot):
    try:
        if not await is_user_in_channel(query.from_user.id, bot):
            subscription_text = (
                "‚ùóÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª\n\n"
                "üì¢ <b>–ù–µ –î–æ–º.—Ä—É</b>\n"
                "üîó https://t.me/+F0O_FIydoKg2M2U6\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–µ—Ä–Ω–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑"
            )

            return await query.answer(
                results=[
                    InlineQueryResultArticle(
                        id="subscribe_required",
                        title="–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª",
                        description="–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ù–µ –î–æ–º.—Ä—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞",
                        input_message_content=InputTextMessageContent(
                            message_text=subscription_text,
                            parse_mode="HTML",
                            disable_web_page_preview=True
                        ),
                        thumb_url="https://img.icons8.com/color/48/000000/subscription.png",
                    )
                ],
                cache_time=5,
                is_personal=True
            )

        results = []
        # Rest of your code remains the same...
        search_query = query.query.lower()
        filtered_data = [
            item for item in MNA_DATA
            if search_query in item['name'].lower() or
               search_query in item['authorization'].lower() or
               search_query in item['connection'].lower()
        ] if search_query else MNA_DATA

        # Create results
        for idx, item in enumerate(filtered_data):
            message_text = (
                f"üì° *{item['name']}*\n\n"
                f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {item['authorization']}\n"
                f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {item['connection']}\n\n"
                f"[–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –ë–ó]({item['link']})"
            )

            results.append(
                InlineQueryResultArticle(
                    id=str(idx),
                    title=item['name'],
                    description=f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {item['authorization']} | –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {item['connection']}",
                    input_message_content=InputTextMessageContent(
                        message_text=message_text,
                        parse_mode="Markdown",
                        disable_web_page_preview=True
                    ),
                )
            )

        if not results:
            results.append(
                InlineQueryResultArticle(
                    id="not_found",
                    title="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                    input_message_content=InputTextMessageContent(
                        message_text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                    )
                )
            )

        await query.answer(
            results=results,
            cache_time=300,
            is_personal=True
        )

    except Exception as e:
        print(f"Error in inline query: {e}")
        error_result = InlineQueryResultArticle(
            id="error",
            title="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            description="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            input_message_content=InputTextMessageContent(
                message_text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        )
        await query.answer(
            results=[error_result],
            cache_time=5
        )
