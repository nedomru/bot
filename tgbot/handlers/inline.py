from aiogram import Router, F, Bot, types
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
import aiohttp
import json

inline_router = Router()


async def fetch_mna_data():
    async with aiohttp.ClientSession() as session:
        async with session.get('https://helper.chrsnv.ru/api/mna.json') as response:
            data = await response.json()
            return data['mna']


@inline_router.inline_query()
async def handle_inline_query(query: InlineQuery):
    try:
        mna_data = await fetch_mna_data()
        results = []

        # Filter data if query is provided
        search_query = query.query.lower()
        filtered_data = [
            item for item in mna_data
            if search_query in item['name'].lower() or
               search_query in item['authorization'].lower() or
               search_query in item['connection'].lower()
        ] if search_query else mna_data

        # Create results
        for idx, item in enumerate(filtered_data):
            message_text = (
                f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä *{item['name']}*\n\n"
                f"üîê –¢–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {item['authorization']}\n"
                f"üîå –¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {item['connection']}\n"
                f"üîó [–ü—Ä–æ–≤–∞–π–¥–µ—Ä –≤ –ë–ó]({item['link']})"
            )

            results.append(
                InlineQueryResultArticle(
                    id=str(idx),
                    title=item['name'],
                    description=f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {item['authorization']} | –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {item['connection']}",
                    input_message_content=InputTextMessageContent(
                        message_text=message_text,
                        parse_mode="Markdown",
                        disable_web_page_preview=True
                    ),
                )
            )

        # If no results found
        if not results:
            results.append(
                InlineQueryResultArticle(
                    id="not_found",
                    title="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                    input_message_content=InputTextMessageContent(
                        message_text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                    )
                )
            )

        await query.answer(
            results=results,
            cache_time=300,  # Cache for 5 minutes
            is_personal=True
        )

    except Exception as e:
        # Handle errors
        error_result = InlineQueryResultArticle(
            id="error",
            title="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            description="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            input_message_content=InputTextMessageContent(
                message_text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        )
        await query.answer(
            results=[error_result],
            cache_time=5
        )