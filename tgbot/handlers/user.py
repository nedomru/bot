from aiogram import Router, F, Bot, types
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery

from tgbot.keyboards.user.inline import user_menu

user_router = Router()

async def is_user_in_channel(user_id: int, bot):
    channel_id = -1002068999312
    try:
        sub = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        if sub.status != "left":
            return True
        else:
            await bot.send_message(chat_id=user_id, text='<b>–ü—Ä–∏–≤–µ—Ç üëã</b>\n\n'
                                                         '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª <b>–ù–µ –î–æ–º.—Ä—É</b>\n\n'
                                                         '<b><a href="https://t.me/+F0O_FIydoKg2M2U6">–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</a></b>\n\n'
                                                         '–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏ /start', disable_web_page_preview=True)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    return False


@user_router.message(CommandStart())
async def user_start(message: Message):
    if not await is_user_in_channel(message.from_user.id, bot=message.bot):
        return

    await message.answer("‚òéÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é <b>–ù–µ –î–æ–º.—Ä—É</b>\n\n"
                         "–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ù–µ –î–æ–º.—Ä—É\n"
                         "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã, –Ω–∞—à –í–ü–ù, –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\n\n"
                         "<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é</i>", reply_markup=user_menu())

@user_router.callback_query(F.data == "usermenu")
async def handle_menu(callback: CallbackQuery) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not await is_user_in_channel(callback.from_user.id, bot=callback.bot):
        await callback.answer()
        return

    await callback.message.edit_text("‚òéÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é <b>–ù–µ –î–æ–º.—Ä—É</b>\n\n"
                         "–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ù–µ –î–æ–º.—Ä—É\n"
                         "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —Ä–∞—Å—á–µ—Ç –ó–ü, –Ω–∞—à –í–ü–ù, –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\n\n"
                         "<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–π</i>", reply_markup=user_menu())
    await callback.answer()

@user_router.callback_query(F.data == "usermenu_salary")
async def handle_salary(callback: CallbackQuery) -> None:
    """–ú–µ–Ω—é –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    if not await is_user_in_channel(callback.from_user.id, bot=callback.bot):
        await callback.answer()
        return

    await callback.answer()
